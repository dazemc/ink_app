import 'dart:convert';

import 'package:multicast_dns/multicast_dns.dart';

Future<String?> getmDnsAddr() async {
  final MDnsClient client = MDnsClient();
  late String? id;
  late String? addr;
  late String? name;
  late String? target;

  // Start the client
  await client.start();
  print("starting mdns search");

  try {
    await for (final PtrResourceRecord ptr in client.lookup<PtrResourceRecord>(
      ResourceRecordQuery.serverPointer('_dazeInk._tcp'),
    )) {
      print('Found service instance: ${ptr.domainName}');

      // Now lookup the SRV record for this instance
      await for (final SrvResourceRecord srv in client
          .lookup<SrvResourceRecord>(
            ResourceRecordQuery.service(ptr.domainName),
          )) {
        // Optional: Lookup A/AAAA record to get IP
        await for (final IPAddressResourceRecord ip in client
            .lookup<IPAddressResourceRecord>(
              ResourceRecordQuery.addressIPv4(srv.target),
            )) {
          addr = ip.address.address;
          target = srv.target;
          print('â†’ ${srv.target}:${srv.port} (IP: ${ip.address.address})');
        }
      }

      await for (final TxtResourceRecord txt in client
          .lookup<TxtResourceRecord>(
            ResourceRecordQuery.text(ptr.domainName),
          )) {
        const splitter = LineSplitter();
        print('Metadata: ${txt.text}');
        final metaLines = splitter.convert(txt.text);
        id = metaLines
            .firstWhere((String text) => text.contains('id='))
            .substring(3);
      }
    }
  } catch (e, stack) {
    print('mDNS lookup failed: $e\n$stack');
  }

  client.stop();
  print("found device: ${target ?? ""}");
  return addr;
}
